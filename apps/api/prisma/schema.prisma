// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid()) @map("_id") @db.ObjectId
  firstName    String?
  lastName     String?
  email        String         @unique
  photoUrl     String?        @map("photo_url")
  role         UserRole       @default(USER)
  Account      Account[]
  refreshToken RefreshToken[]
  Apikeys      Apikeys[]
  apiRequests  Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Account {
  id                String  @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String? // type of auth mechanism
  provider          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model RefreshToken {
  id           String @id @default(cuid()) @map("_id") @db.ObjectId
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @db.ObjectId
  refreshtoken String @unique

  @@index([userId])
  @@index([id])
}

model Apikeys {
  id              String            @id @default(cuid()) @map("_id") @db.ObjectId
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String            @db.ObjectId
  name            String            @unique
  key             String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ApiDailyStats   ApiDailyStats[]
  ApiMonthlyStats ApiMonthlyStats[]
}

model ApiDailyStats {
  id         String   @id @default(cuid()) @map("_id") @db.ObjectId
  date       DateTime @unique
  apiKeyId   String   @db.ObjectId
  dailyUsage Int      @default(0)
  apiKey     Apikeys  @relation(fields: [apiKeyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([date, apiKeyId])
}

model ApiMonthlyStats {
  id           String   @id @default(cuid()) @map("_id") @db.ObjectId
  month        Int      @unique
  apiKeyId     String   @db.ObjectId
  monthlyUsage Int      @default(0)
  apiKey       Apikeys  @relation(fields: [apiKeyId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([month, apiKeyId])
}

model Exercise {
  exerciseId        String            @id @default(cuid()) @map("_id") @db.ObjectId
  id                String            @unique
  name              String
  target            TargetMuscle      @relation(fields: [targetMuscleId], references: [id])
  targetMuscleId    String            @db.ObjectId
  secondaryMuscleId String[]          @db.ObjectId
  secondaryMuscles  SecondaryMuscle[] @relation(fields: [secondaryMuscleId], references: [id])
  instructions      String[]
  gifUrl            GifUrl?
  dbid              String
  Equipment         Equipment         @relation(fields: [equipmentId], references: [id])
  equipmentId       String            @db.ObjectId
  bodyPart          BodyPart          @relation(fields: [bodyPartId], references: [id])
  bodyPartId        String            @db.ObjectId
}

model GifUrl {
  id         String   @id @default(cuid()) @map("_id") @db.ObjectId
  url        String   @unique
  gridfsId   String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String   @unique
}

model TargetMuscle {
  id       String     @id @default(cuid()) @map("_id") @db.ObjectId
  muscle   String     @unique
  exercise Exercise[]
}

model Equipment {
  id        String     @id @default(cuid()) @map("_id") @db.ObjectId
  equipment String     @unique
  exercise  Exercise[]
}

model BodyPart {
  id       String     @id @default(cuid()) @map("_id") @db.ObjectId
  bodyPart String     @unique
  exercise Exercise[]
}

model SecondaryMuscle {
  id         String     @id @default(cuid()) @map("_id") @db.ObjectId
  muscle     String     @unique
  Exercise   Exercise[] @relation(fields: [exerciseId], references: [exerciseId])
  exerciseId String[]   @db.ObjectId
}

enum UserRole {
  ADMIN
  USER
}
